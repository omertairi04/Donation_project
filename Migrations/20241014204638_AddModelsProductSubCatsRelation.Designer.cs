// <auto-generated />
using System;
using D_Project.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace D_Project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241014204638_AddModelsProductSubCatsRelation")]
    partial class AddModelsProductSubCatsRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("D_Project.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("D_Project.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MainCategory");
                });

            modelBuilder.Entity("D_Project.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Exparation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "633a6744-d770-4e0b-ada9-209c4c5785e1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "21d9762a-8110-4b4b-bf50-c0e156edfe37",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "7da8e03f-f9e5-47a6-aac8-e5e44a0d95bb",
                            Name = "Donator",
                            NormalizedName = "DONATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductSubCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "SubCategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("ProductSubCategory");
                });

            modelBuilder.Entity("SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SubCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("638125bf-9101-409f-9430-b1e89e2172d8"),
                            Description = "Apparel for men",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("d06cb356-7dbc-4514-8b09-b2d4fbfb51fc"),
                            Name = "Men's Clothing"
                        },
                        new
                        {
                            Id = new Guid("1e72e900-8bdb-4b38-8bbb-4b0399916ebd"),
                            Description = "Apparel for women",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("d06cb356-7dbc-4514-8b09-b2d4fbfb51fc"),
                            Name = "Women's Clothing"
                        },
                        new
                        {
                            Id = new Guid("e167da48-5302-457d-b333-b0971d2ce9ed"),
                            Description = "Apparel for children",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("d06cb356-7dbc-4514-8b09-b2d4fbfb51fc"),
                            Name = "Children's Clothing"
                        },
                        new
                        {
                            Id = new Guid("dbccfe0c-101e-46e3-b30b-9e02c5024946"),
                            Description = "Footwear for all",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("d06cb356-7dbc-4514-8b09-b2d4fbfb51fc"),
                            Name = "Shoes & Footwear"
                        },
                        new
                        {
                            Id = new Guid("178c3b72-8bb9-4533-8eb8-f5199d26d7c3"),
                            Description = "Hats, scarves, belts, etc.",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("d06cb356-7dbc-4514-8b09-b2d4fbfb51fc"),
                            Name = "Accessories"
                        },
                        new
                        {
                            Id = new Guid("4cab9944-7813-4d43-b397-9b54305cf2bc"),
                            Description = "Household furniture",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("be2579fe-816c-40b3-bd01-be5f9c9063ef"),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("31f8ec51-bbaf-4c8a-90cc-2f6f93d19045"),
                            Description = "Utensils and appliances for the kitchen",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("be2579fe-816c-40b3-bd01-be5f9c9063ef"),
                            Name = "Kitchenware"
                        },
                        new
                        {
                            Id = new Guid("3f155ddb-dce1-4214-adde-17077f66af43"),
                            Description = "Bedding essentials",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("be2579fe-816c-40b3-bd01-be5f9c9063ef"),
                            Name = "Bedding & Linens"
                        },
                        new
                        {
                            Id = new Guid("b9502c53-a152-4b36-9541-e7f498f5feec"),
                            Description = "Cleaning essentials",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("be2579fe-816c-40b3-bd01-be5f9c9063ef"),
                            Name = "Cleaning Supplies"
                        },
                        new
                        {
                            Id = new Guid("3919d812-af91-40b6-be97-98ad61beaa8b"),
                            Description = "Decorative items for the home",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("be2579fe-816c-40b3-bd01-be5f9c9063ef"),
                            Name = "Home Décor"
                        },
                        new
                        {
                            Id = new Guid("5e806561-87e5-4fd0-ac25-25e2aeb3062e"),
                            Description = "Computers and laptops",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("68ce9515-3997-4c7a-9963-cd4b19b1a9fd"),
                            Name = "Computers & Laptops"
                        },
                        new
                        {
                            Id = new Guid("28e54862-25b6-4500-946d-451f0bd6ee65"),
                            Description = "Smartphones and tablets",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("68ce9515-3997-4c7a-9963-cd4b19b1a9fd"),
                            Name = "Mobile Phones & Tablets"
                        },
                        new
                        {
                            Id = new Guid("9012e5b7-9e80-4c3e-9954-e04c137de387"),
                            Description = "Appliances for home use",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("68ce9515-3997-4c7a-9963-cd4b19b1a9fd"),
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = new Guid("50e30ee0-d66b-4759-8b86-60ac7e14a46a"),
                            Description = "Televisions and audio equipment",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("68ce9515-3997-4c7a-9963-cd4b19b1a9fd"),
                            Name = "TVs & Audio Systems"
                        },
                        new
                        {
                            Id = new Guid("8142fb3b-785d-4fa8-a547-8f948459393d"),
                            Description = "Fiction, non-fiction, educational",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("05914267-4605-45f5-82b3-ba2bf084955e"),
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("df023da7-e15d-4444-a14c-34e0c4255931"),
                            Description = "Various magazines",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("05914267-4605-45f5-82b3-ba2bf084955e"),
                            Name = "Magazines"
                        },
                        new
                        {
                            Id = new Guid("07ff0b73-c7c0-4c00-b39d-b342ab005d4c"),
                            Description = "Media collection",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("05914267-4605-45f5-82b3-ba2bf084955e"),
                            Name = "CDs, DVDs, Blu-rays"
                        },
                        new
                        {
                            Id = new Guid("e48f8aec-e1b1-40d1-94a5-0eaf3f615647"),
                            Description = "Games for fun and challenges",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("b508421a-ac57-47fe-92a1-e9e839fde9f8"),
                            Name = "Board Games & Puzzles"
                        },
                        new
                        {
                            Id = new Guid("fdf27400-6d7a-4bff-b933-5341003e37c4"),
                            Description = "Toys for young children",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("b508421a-ac57-47fe-92a1-e9e839fde9f8"),
                            Name = "Baby & Toddler Toys"
                        },
                        new
                        {
                            Id = new Guid("ccd09a85-97f5-45da-a606-03e693411da0"),
                            Description = "Toys that promote learning",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("b508421a-ac57-47fe-92a1-e9e839fde9f8"),
                            Name = "Educational Toys"
                        },
                        new
                        {
                            Id = new Guid("14c57dc1-8c52-46b3-a9d1-62fc7b38a220"),
                            Description = "Gaming systems and games",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("b508421a-ac57-47fe-92a1-e9e839fde9f8"),
                            Name = "Video Games & Consoles"
                        },
                        new
                        {
                            Id = new Guid("5f3e00f5-932c-4785-b163-1aebd1b04a44"),
                            Description = "Equipment for gym workouts",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("c15893da-2b58-479f-8ae9-d93b7f156d5b"),
                            Name = "Gym Equipment"
                        },
                        new
                        {
                            Id = new Guid("5c443965-6991-458f-af1e-13ca6a10ad2a"),
                            Description = "Gear for various sports",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("c15893da-2b58-479f-8ae9-d93b7f156d5b"),
                            Name = "Sports Gear"
                        },
                        new
                        {
                            Id = new Guid("8f2a575c-04ee-4529-9123-ffeb61051de6"),
                            Description = "Bicycles and scooters for all ages",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("c15893da-2b58-479f-8ae9-d93b7f156d5b"),
                            Name = "Bicycles & Scooters"
                        },
                        new
                        {
                            Id = new Guid("89f9518b-0ff8-498e-ab56-089d7dfb3b68"),
                            Description = "Equipment for outdoor activities",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("c15893da-2b58-479f-8ae9-d93b7f156d5b"),
                            Name = "Camping & Outdoor Gear"
                        },
                        new
                        {
                            Id = new Guid("db17c983-3326-4b48-b5ff-0d80bef47d36"),
                            Description = "Canned food items",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("1dcd7648-fbae-4302-8ef7-c84dae621879"),
                            Name = "Canned Goods"
                        },
                        new
                        {
                            Id = new Guid("7c2c8373-4884-4f06-9e3c-4530cc7cd990"),
                            Description = "Non-perishable food products",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("1dcd7648-fbae-4302-8ef7-c84dae621879"),
                            Name = "Non-Perishable Items"
                        },
                        new
                        {
                            Id = new Guid("f7b96a76-c589-499a-9ef7-9ffc2b53b73d"),
                            Description = "Food and formula for infants",
                            Icon = "wwwroot/images/mainCategories/category.jpg",
                            MainCategoryId = new Guid("1dcd7648-fbae-4302-8ef7-c84dae621879"),
                            Name = "Baby Food & Formula"
                        });
                });

            modelBuilder.Entity("D_Project.Models.Product", b =>
                {
                    b.HasOne("D_Project.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D_Project.Models.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("D_Project.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("D_Project.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("D_Project.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("D_Project.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSubCategory", b =>
                {
                    b.HasOne("D_Project.Models.Product", "Product")
                        .WithMany("ProductSubCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("D_Project.Models.Product", b =>
                {
                    b.Navigation("ProductSubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
